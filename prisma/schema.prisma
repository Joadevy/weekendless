// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" 
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?   @default("user") 
    accounts      Account[]
    sessions      Session[]
    reservations  Reservation[]
}

model Event {
    id        Int      @id @default(autoincrement())
    name      String
    imageUrl  String
    description String
    date     DateTime
    seats     Seat[]
    venueId  Int
    venue    Venue @relation(fields: [venueId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    @@index([name])
}

model Venue{
    id        Int      @id @default(autoincrement())
    name      String
    address   String
    events   Event[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    @@index([name])
}

model Seat {
    id        Int      @id @default(autoincrement())
    number      Int    
    typeId      Int
    type        TypeSeat @relation(fields: [typeId], references: [id])
    eventId   Int 
    event     Event    @relation(fields: [eventId], references: [id])
    reservations Reservation[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    @@index([number])
}

model TypeSeat {
    id        Int      @id @default(autoincrement())
    name      String
    description String
    price     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    Seats     Seat[]

    @@index([name])
}

model Reservation {
    id        Int      @id @default(autoincrement())
    attendeeNationalID String
    attendee  Attendee @relation(fields: [attendeeNationalID], references: [nationalID])
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    seatId    Int     
    seat      Seat     @relation(fields: [seatId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    payment   Payment?

    @@index([userId])
}

model Attendee {
    id        Int      @id @default(autoincrement())
    name      String
    phone     String
    email     String
    nationalID String  @unique
    reservations Reservation[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    @@index([nationalID])
}

model Payment {
    id        String      @id 
    reservationId Int @unique
    reservation   Reservation @relation(fields: [reservationId], references: [id])
    preferenceId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}
